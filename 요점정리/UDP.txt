TCP가 UDP에 비해 느린 이유 :
데이터 송수신 이전 이후에 거치는 연결 설정 및 해제 과정
데이터 송수신 과정에서 거치는 신뢰성보장을 위한 흐름제어

따라서 송수신하는 데이터의 양은 작으면서 잦은 연결이 필요한 경우에는 UDP


TCP는 소켓과 소켓의 관계가 1:1임. 10개의 클라이언트에 서비스를 제공하려면
서버소켓 포함 11개가 필요하다는것. 하지만 UDP는 서버건 클라건
하나의 소켓만 있으면 됨  하나의 UDP소켓으로 둘 이상의 호스트와 통신이 가능.

TCP 소켓은 생성하면 주소정보를 따로 추가 하는 과정이 없음
왜냐면 TCP는 이미 목적지와 연결되어 있음.

UDP는 연결되어 있지 않으므로 데이터를 전송할때마다 항상 목적지를
써야함. 마치 편지를 보낼때 목적지 쓰듯이.

쓰는 read write 같은 함수들도 목적지 주소정보를 따로 써줘야함

sendto(int sock,void *buffer,size_t nbyte,int flags,struct sockaddr *to,socklen_t addrlen)
성공시 전송된 바이트 수 실패시 -1 반환
1. 데이터 전송에 사용될 UDP소켓의 파일 디스크립터 전달
2. buff 전송할 데이터를 저장하고 있는 버퍼의 주소 값 전달.
3. 전송할 데이터의 크기를 바이트 단위로 전달 
4. flags  옵션지정에 사용되는 매개변수 지정할 옵션이 없다면 0 전달
5. to 목적지 주소정보를 담고 있는 sockaddr 구조체 변수의 주소 값 전달
6. 매개변수 to로 전달된 주소 값이 구조체 변수 크기 전달.


recvfrom(int sock,void *buffer,size_t nbyte,int flags,struct sockaddr *to,socklen_t addrlen)

1. 데이터 전송에 사용될 UDP소켓의 파일 디스크립터 전달
2. buff 전송할 데이터수신에 사용될 버퍼의 주소 값 전달.
3. 수신할 데이터의 크기를 바이트 단위로 전달 매개변수 buff가 가르키는 버퍼의 크기를 넘을 수 없음. 
4. flags  옵션지정에 사용되는 매개변수 지정할 옵션이 없다면 0 전달
5. to 발신지 주소정보를 담고 있는 sockaddr 구조체 변수의 주소 값 전달
6. 매개변수 from으로  전달된 주소에 해당하는 구조체 변수의 크기를 담고 있는 변수의 주소값 전달



UDP소켓의 sendto 함수 호출을 통한 데이터의 전송과정은 다음과 같이 크게 3단계로 나눌 수 있다.
1단계 : UDP 소켓에 목적지의 IP와 PORT번호 등록
2단계 : 데이터 전송
3단계 : UDP소켓에 등록된 목적지 정보의 삭제


sendto 함수가 호출 될때 마다 위의 과정을 반복한다. 이렇듯 목적지의 정보가 등록되어 있지 않은 소켓을 가리켜 unconnected 소켓이라 하고 반면 목적지 정보가 등록되어 있는 소켓을 가리켜 connected소켓이라 한다.
물론 UDP소켓은 기본적으로 Unconnected소켓이다. 이러한 UDP소켓은 다음과 같은 상황에서는 매우 불합리하게
동작한다.

211.210.147.82 PORT 82번으로 준비된 총 세개의 데이터를 세번의 send함수 호출을 통해서 전송한다.

이 경우 위에서 정리한 데이터 전송 세 단계를 총 3회 반복 해야 한다. 그래서 하나의 호스트와 오랜시간 데이터를
송수신 해야 한다면 UDP소켓을 connected 소켓으로 만드는것이 효율적이다. 참고로 앞서 보인 
보인 1단계 3단계가 UDP데이터 전송과정의 약 1/3에 해당한다고 하니 이 시간을 줄임이르 적지 않은 성능향상을
기대 할 수 있다.




