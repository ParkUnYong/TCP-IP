inet_addr

in_addr_t inet_addr(const * string)
성공시 빅 엔디안으로 32비트 정수값 반환 실패시 INADDR_NONE반환

문자로된 주소 값을 10진수 IP를 32비트 정수로 변환 값(빅 엔디안으로 반환)

IP는 0~255까지 가능한데 인자값으로 256같은 범위 밖에 수가 있으면 실패가 돌아옴.

inet_aton(const char * striong , struct in_addr *addr)
문자로 된 IP를 32비트 정수값 바꿔서 sockaddr_in의 멤버인 in_addr에 저장까지 해줌.
성공시 1반환 실패시 0 반환

inet_ntoa

char *inet_ntoa(struct in_addr adr)
성공시 변환된 문자열의 주소 값 반환 실패시 -1 반환

32비트 IP 정수 값을  10진수 문자열로 반환

데이터가 수신이 되면 수신된 데이터의 ip주소 추출. 4바이트(0123124) 이건 보기 불편하니 변환
로그 남길때 사용 문자열로 변환해서 로그를 남김

addr.sin_addr.s_addr=atol(INADDR_ANY);

INADDR_ANY 내부적으로 0임. 0.0.0.0 이렇게 IP가 초기화 되는데 이렇게 초기화 하면
컴퓨터의 IP주소가 자동으로 할당되기 떄문에 입력하는 수고를 덜 수 있다.

서버소켓은 자신이 속한 컴퓨터의 IP주소로 초기화 해야 하는데 이 경우 입력할 IP주소가 뻔한데
왜 굳이 요구하냐면 한대의 PC에 여러개의 IP가 할당 될 수 있기 떄문. IP주소는 NIC의 갯수 만큼 할당이 가능 하다.
그리고 이러한 경우는 서버 소켓이라 할지라도 어느 IP주소로 들어오는 데이터를 수신 할지 결정 해야해서
IP주소를 요구하는것. NIC가 하나라면 주저 없이 INADDR_ANY로 초기화가 편함.

서버 코드를 실행할때 ./hello 9190 이렇게 포트만 할당하는 이유는 INADDR_ANY를 통한 IP초기화
에서 찾을 수 있다.

PF_INET와 AF_INET는 둘다 주소 체계로 ipv4를 의미하는데 pf는 프로토콜에서 af는 주소 체계에서 임.
