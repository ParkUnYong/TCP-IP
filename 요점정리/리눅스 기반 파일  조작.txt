C함수
시스템함수
운영체제

Fopen은 내부적으로 시스템함수를 콜하고 운영체제에 폴더를 만들라고 요구함.
운영채제가 제공하는 파일조작 함수를 공부 해야함. 소켓 프로그래밍은 운영체제가 제공해주는 함수를
대부분 사용하기 때문임.

운영체제가 제공하고 있는 함수이다보니 리눅스와 윈도우는 차이가 날 수 밖에 없음.
쓰는 방법과 함수 이름도 유사하지만 일치하지 않음. 다만 소켓관련 함수들만 일치

즉 소켓공부할떄는 윈도우와 리눅스를 같이 공부하면 더불어 다른 운영체제들을 같이 맛 볼 수 있다.

로우레벨 파일 입출력
ANSI(C언어) 에서 제공하는게 아닌 운영체제가 제공하는 함수 기반 입출력을 말함.

소켓도 파일로 간주하기 때문에 파일입출력 함수를 기반으로 소켓기반 데이터 송수신
디스크립터는 운영체제가 만든 파일 (그리고 소켓)을 구분하기 위한 일종의 숫자

리눅스는 소켓도 파일로 간주함.

운영체제 입출력 함수는 파일 디스크립터 요구

저 수준의 파일 입출력 함수에게 소켓의 파일 디스크립터를 전달하면 소켓을 대상으로 입출력을 진행한다.

int open(const char *path, int flag)
          경로를 포함한 파일이름, 오픈 모드 (O_CREAT 파일 생성)
성공시 파일 디스크립터 반환 실패시 -1 반환

int close(int fd)
성공시 0 실패시 -1 반환


write 쓰기 함수

ssize_t write(int fd, const void* buf,size_tnbytes);
fd : 데이터 전송대상을 나타내는 파일 디스크립터
buf: 전송할 데이터가 저장된 버퍼의 주소 값 전달
nbytes : 전송할 데이터의 바이트 수 전달

ssize_t read(int fd,const void * buf,size_t nbyte)
디스크립터를 전달된 파일로 부터 n바이트를 읽어서 버퍼에 저장 하겠다.


예제를 바꿔서 두번 세번 문자열 주고 받게 한다거나 해보자.


소켓과 파일에 일련의 파일디스크립터의 정수값이 할당됨을 알 수 있다.
그리고 이를 통해서 리눅스는 파일과 소켓을 동일하게 간주함을 확인 할 수 있다!
