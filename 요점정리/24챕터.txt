TCP/IP 방식으로 소켓으로 데이터를 송수신 하는법 공부.
FTP,HTTP 등 여러가지 프로토콜을 접하게 될 것.

클라가 요청하면 서버가 응답 하는게 기본 골자지만 

프로토콜들은 더 여러가지 기능을 가지고 있음.

이런것들을 어떻게 완성할것인가. 소켓프로그램을 기반으로 

FTP를 어떻게 완성 할 것인가를 약속한게 FTP 프로토콜임.

예를 들어 FTP 서버를 만든다.

소켓 프로그래밍을 기반으로 FTP가 어떻게 구성되어 있는지 분석하고 

FTP의 약속을 근거로 하여 프로그래밍 하면 FTP서버임.

서버만이 아니고 클라이언트도. 서버를 알면 클라이언트도 만들 수 있음.

FTP 프로토콜을 근거로 클라를 구성하면 FTP 클라임.

HTTP 프로토콜로 완성된게 웹서버고 웹서버는 프로그램 사용자들이 접속하는

서비스의 완성체임.  응용 프로토콜과 TCP/IP와의 관계를 한번쯤 보는게 좋겠다

라는 생각.

웹 서버의 기능
- HTTP 프로토콜을 기반으로 웹 페이지에 해당하는 파일을 클라이언트에게 전송하는 역할의 서버
- HTTP 프로토콜은 하이퍼텍스트의 전송을 목적으로 설계된 어플리케이션 레벨의 프로토콜
- 하이퍼텍스트랑 마우스 클릭을 통해서 이동이 가능한 일반적으로 HTML로 이뤄진 텍스트를 의미

HTTP의 통신은

데이터 요청(클라) -> 데이터 응답(서버) -> 연결종료 

TCP기반으로 연결 형성되고 종료됨. 상태라는게 존재 하지 않음.

웹 서버가 있고 자바를 예로 들면 JSP 컨테이너 라는것이 있음.

웹 서버는 단순하게 요청하면 주는 그런 서버임.

JSP 페이지 라는게 있음. JSP 페이지는 클라가 요청한 HTML 페이지를 생산해내는

프로그램임.  웹 서버와 붙어서 JSP 컨테이너를 붙이면 웹 서버의 기능이 보강이 됨.

정적이지 않고 동적이게 됨. 웹 서버가 상당히 많은 일을 하는것처럼 보이나

실질적 웹 서버는 요청 응답 종료가 전부인데, HTTP 서버에 붙어서 서버를

동적으로 생성해 낸다거나 하는 기능이 추가가 되는 상황임.

웹 브라우저가 정말로 하는 일은 HTML 코드를 우리가 눈으로 보기 해석
하는 능력임. 

============================================================


IOCP와 epoll은 우수한 성능을 보장하는 대표적인 서버 모델들이다. 그런데 HTTP 프로토콜을 기반으로 하는
웹 서버에 이 모델을 적용하는 경우에는 다른 모델에 비해 우수한 성능을 보장한다고 말 할 수 없다.
그렇다면 그 이유는 무엇인가?

->IOCP와 epoll 모두 둘 이상의 소켓을 관리하는데 장점이 있는 프로토콜이다. 관찰 대상의 소켓이 입출력 관련 이벤트가 
   발생하면  발생한 소켓을 감지하여 IO와 관련된 처리를 하는 서버모델이다.
   그런데 웹 서버의 경우에는 둘 이상의 소켓을 계속해서 관리 할 필요가 없다. 왜냐하면 단 한번의 요청 및 응답을 
   과정을 거치고 나면 연결을 종료 하기 때문이다. 따라서 IOCP와 epoll을 통한 추가적인 성능 향상을 기대하기 어렵다.


