비동기(Asynchronous) Notification IO 모델의 이해
우리가 문제에 직면하는것들은 동기보단 비동기 모델일떄 해결되는
경우가 많음.

Notification은 알림을 의미. 소켓으로부터 데이터가 수신 혹은 송신되면 알림을 줌

이걸 비동기로 해결하는 IO모델임.

동기 입출력은 
데이터의 전송이 시작되면 send함수가 호출되고 
데이터가 전송이 완료되야 send함수가 반환됨.
(데이터의 전송완료 라는것은 데이터가 버퍼를 통해서 상대쪽으로 가는데 
버퍼로 다 전송이 되야 전송완료임. 상대 호스트에 완전히 간 것도 아닌데
왜 완료냐 라고 하는데 TCP의 특성 떄문임. 전송이 보장 되기 때문에
버퍼로 가기만해도 전송이 완료 된거나 마찬가지기 때문임)

함수가 호출되는 동안에는 다른 작업 못하는 단점이 있음.
recv함수의 경우는 수신이 시작될떄 함수가 호출되고 
반환할때 수신 받기 위한 버퍼가 가득 찼을때임.

이렇게 함수의 호출과 데이터의 입출력이 일치 하는게 동기식임.


비동기 입출력은

send함수가 호출되자마자 반환 되는 성격임(전송이 완료 안되도)
recv도 마찬가지.  비록 함수는 반환 했지만 내부적으론 
데이터의 송수신이 진행 되는것을 비동기식이라 함.

I/O는 CPU를 별로 사용 안하는 연산
블로킹의 원인이 IO면 그냥 내부적으로 진행되게 냅두고 
CPU를 사용하는 연산 하는게 효율적.
CPU사용도와 일의 진행도를 봤을떄 비동기식이 효율적.

동기 Notification 
- 입출력의 Notification(알림)이 동기적으로 이루어 지는것.
- Select 함수는 입출력이 완료 또는 가능한 상태가 되었을떄 반환을 하므로
  select함수가 동기 Notification모델의 대표적 예
   (알림이 있을때 반환 하기 때문에 동기)

비동기 Notification
- 입출력 Notification(알림)이 비동기적으로 이뤄짐.
- select 함수의 비동기 버전이 WSAEventSelect 함수임.
- WSAEventSelect 함수는 입출력의 완료에 상관없이 무조건 반환을 한다.
  따라서 입출력의 완료를 확인하기 위한 별도의 과정을 거쳐야함.
- WSAEventSelect  함수를 이용하면 IO 상태의 변화를 명령한 다음 이후에 
  기타 작업을 진행한 다음에 I/O 상태 변화를 확인 할 수 있다.

(관찰을 명령하고 함수가 바로 반환됨. 내부적으로는 쭉 진행되어 저장되고.
 우리가 원하는 시간에 찾아가서 알림(변화)을 확인 하는 구조)

================================================
비동기 Notification IO 모델의 구현

WSAEventSelect(SOCKET s, WSAEVENT hEventObject,long INetworkEvent);
성공시 0 실패시 SOCKET_ERROR 반환.

- 관찰대상인 소켓의 핸들 전달
- 이벤트 발생 유무의 확인을 위한 Event 오브젝트 핸들 전달 (커널 오브젝트의 핸들)
- 감시하고자 하는 이벤트 유형 정보 전달.

소켓 S에서 3번째 인자의 이벤트가 발생하면 두번째 인자 핸들이 시그널드가 돔.

소켓 하나당 한번만 호출하면 내부적으로 계속 전달해서 관찰되면 시그널드 상태가 됨

Select는 계속 호출 했어야 했음.

CreateEvent 함수를 이용해서 Event오브젝트를 생성 하였었는데 CreateEvent함수는
Event 오브젝트를 생성하되 auto-reset 모드와 manual-reset 모드중 하나를 선택해서
생성 할 수 있는 함수 였다. 그러나 여기서 필요한것은 오로지 manual-reset모드
이면서 논 시그널드 상태인 Event오브젝트 이다.   CreateEvent 보다 간편하게 
manual-reset 모드 Event 오브젝트의 생성 하는 함수가 아래의 함수이다.


WSAEVENT WSAcreateEvent(void)
-> 성공시 Event 오브젝트 핸들(manual-reset 커널오브젝트 (논 시그널드 상태)
    
BOOL WSACloseEvent(WSAEVENT hEVENT)
-> 성공시 True 실패시 FALSE 반환



WSAEventSelect는 이벤트가 발생되면 이벤트 오브젝트를 시그널드로 바꾸라는 것.

소켓1 소켓2 소켓3이 있고 이 소켓에 연결되있는 커널 오브젝트 1,2,3이 있으면

커널오브젝트를 확인하면 됨. 시그널드로 바뀌었는지 확인하는 함수.

WaitForSingle 혹은 multieple 함수와 유사한
WSAWaitForMultipleEvents 함수가 있음

WSAWaitForMultipleEvents(DWORD cEvents,const WSAEVENT * lpEvents
                                     BOOL fwaitAll,DWOD dwTImeout,BOOL fAlertable)

- signaled 상태로의 전이 여부를 확인할 이벤트 오브젝트의 개수 정보 전달
- Event 오브젝트의 핸들을 저장하고 있는 배열의 주소 값 전달
- TRUE 전달시 모든 오브젝트가 signaled 상태일떄 반환 FALSE전달시 하나만 
   signaled 상태가 되어두 반환
- 1/100초 단위로 타임아웃 지정 WSA_INFINITE 전달시 signaled 상태가 될때까지
   반환하지 않음.
- TRUE 전달시 alertable wait 상태로의 진입(저 상태는 다음챕터에서 설명)
- 반환 값 : 반환된 정수 값에서 상수 값 WSA_WAIT_EVENT_0을 빼면 두번째 매개변수로 
               전달된  Event 오브젝트의 핸들이 저장된 인덱스가 계산됨. 만약
               둘 이상의 Event오브젝트가 signaled 상태로 전이 됬다면 그중 
               작은 인덱스 값이 계산됨. 그리고 타임아웃 발생시 WAIT_TIMEOUT가 반환.

그런데 두개 이상일시 그럼 나머지가 발생한곳의 위치는 어떻게 찾냐면
for문으로 반복해서 찾는 과정을 거쳐야함. (번거롭지만 이렇게 설계됨)

이 함수를 호출하면 이벤트가 발생한 커널 오브젝트가 있는지 없는지
원하는 타이밍에 물어 볼 수 있음.

위의 이유로 오토 리셋이면 이벤트 발생하고 반환되면서 논 시그널드로 
자동 스위칭이 되버리면 이벤트 발생을 확인 못해서 매뉴얼 리셋모드로 만들어야 함.

이벤트 셀렉트 함수로 관찰 요구하고 WSAWaitForMultipleEvents 이용해서
변화 일어난 소켓 핸들 확인법도 알음. 

이제 변화의 종류가 무엇인지 알아 내야함.
(수신인지 송신인지 연결을 끊자는 것인지)


WSAEnumNetworkEvents(Socket s ,  WSAEVENT hEventobject,
                                   LPWSANETWORKEVENTS lpNetworkEvents)
성공시 0 실패시 SOCKET_ERROR 반환
- 이벤트 발생한 소켓의 핸들 전달
- 소켓과 연결된(WSAEventSelect 함수 호출에 의해) Signaled 상태인 Evnet
   오브젝트의 핸들 전달
- 발생할 이벤트의 유형정보와 오류정보로 채워질  _WSANETWORKEVENTS 정보 전달

소켓과 이벤트 오브젝트 인자를 전달해서 어떤 이벤튼지 정보를 _WSANETWORKEVENTS
구조체에 저장해주는 함수.

typedef struct _WSANETWORKEVENTS
{
  long InetworkEvents; //수신할 데이터가 존재하는 FD_READ가 전달
  int iErrorCode[FD_MAX_EVENTS] // 이벤트 FD_XXX관련 오류 발생하면 0이외 값 저장.
}

셀렉트 함수와의 가장 큰 차이점

1. 입출력을 확인하는 방법

2. 입출력의 대상에 소켓을 등록하는 방법






